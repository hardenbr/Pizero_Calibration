Pizero Optimization Code - Joshua Hardenbrook - joshuarh@princeton.edu 

This project is to optimize the pizero selection by scanning an n-dimensional space
of cuts and fitting the resulting distribution post-selection. The n-dimensional space of cuts will be referred to as "the grid". 

build_grid.py
-------------

This is the main script for performing the grid optimization:

Step 1)  the conversion of the ntuples into roodatasets. The flag "-f" specifies the file to convert. The flag "-d" should not be specified
Step 2)  The construction of the grid, performing the cuts and fitting the resulting distribution. The flag "-d" specifies a .txt file containing the names of rooFILENAME.root files generated by Step 1. 
Step 3) The grid points which you would like the fit plot should be run with the "-l" flag described below and specifing the "-w" flag to write the output of the fits. 

Helpful flags:

"-z": you can pass a log file to build_grid.py containing the results of step 2. All points which were fit and completed will not be scanned (vetoed)
"-l": you can pass a txt file (separated by line breaks) of specific grid points to scan and avoid doing the

pizero_run_grid.py
-----------------

This submits the build_grid.py fit jobs to the lxplus batch system. 

pizero_ntuple_to_dataset_bsub.py
--------------------------------

This submits the build_grid.py jobs (step 1 above) to the lxplus batch system.

grid_vs_sob.py
--------------

When the log files are produced from calling pizero_run_grid.py grid_vs_sob will take a .txt file containing the logfile results and plot the grid number vs. the signal/background.
 The output will include the best point as well as the set up cuts used for that point.

Ex. "python grid_vs_sob.py result_of_step2.txt"

~~~~~~EXTRAS~~~~~~~

fit.py
------
test fit and example.

rootlogon.py
------------
list of style changes used by buildgrid.py
